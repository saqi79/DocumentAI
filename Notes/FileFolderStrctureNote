src/
|-- pages/
| |-- HomePage/
| | |-- index.js
| | |-- components/
| | |-- utils/
| | |-- helpers/
| |-- RecipePage/
| | |-- index.js
| | |-- components/
| | |-- utils/
| | |-- helpers/
|-- components/
| |-- Header/
| | |-- index.js
| | |-- Header.css
| |-- Footer/
| | |-- index.js
| | |-- Footer.css
|-- utils/
| |-- api.js
| |-- auth.js
|-- helpers/
| |-- validation.js
| |-- formatting.js

This type of structure benefit

https://akshay-p.medium.com/a-guide-to-organizing-your-react-project-the-optimal-folder-structure-130e965a59b2

Modularity: The structure promotes modularity by separating concerns into different directories such as pages, components, helpers, and utils. This makes the codebase easier to understand and maintain.
Scalability: The hierarchical structure allows for easy scalability as new features or sub-features can be added under their respective directories without cluttering the main directories.
Organization: Each directory serves a specific purpose, making it easier for developers to locate files and understand the overall architecture of the application.
Reusability: Components and utilities are organized in separate directories, promoting code reuse across different parts of the application.
